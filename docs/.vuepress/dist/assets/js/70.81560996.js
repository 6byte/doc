(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{554:function(s,a,n){"use strict";n.r(a);var t=n(58),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"java-字节码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-字节码"}},[s._v("#")]),s._v(" Java-字节码")]),s._v(" "),n("h2",{attrs:{id:"概览"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[s._v("#")]),s._v(" 概览")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1. .class文件只要符合JVM规范,生成方式不限任何语言\n2.\t.class实质：是严格按照JVM的规范,编译产生的二进制文件\n\t以表的形式组织代码中的各个部分,\n\t一个.class文件等于一张表\n3.  .class表重要组成部分:\n\t\t常量池，访问标记，当前类，类的属性，类的方法，类的字段，类的接口，父类，magic!\n\t\tmagic：识别文件类型是否是class文件\n\t\t访问标志:public ,private,protected\n4. .class是反射的基础\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("jvm基础")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1.每个java程序至少有一个线程\n2.一个线程会分配一个java栈\n3.栈可以有多个栈帧\n4.一个方法=一个栈帧=局部变量表+操作栈+动态链接+其他信息\n\n加载：\n本地变量表 和 栈帧局部变量表 进行数据交互\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"java栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java栈"}},[s._v("#")]),s._v(" Java栈")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1.与java运行相关，随线程一齐创建消亡，并不存在垃圾回收问题\n2.存放\n\t1.变量，和八种基本数据类型，\n\t2.存放对象引用\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"方法区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[s._v("#")]),s._v(" 方法区")]),s._v(" "),n("blockquote",[n("p",[s._v("存放类的基本信息")])]),s._v(" "),n("h3",{attrs:{id:"本地方法栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[s._v("#")]),s._v(" 本地方法栈")]),s._v(" "),n("blockquote",[n("p",[s._v("运行c语言或其他语言")])]),s._v(" "),n("h3",{attrs:{id:"内存屏障"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[s._v("#")]),s._v(" 内存屏障")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1.CPU分多级缓存:L1,L2,L3\n    优点:提高了数据访问性能\n    缺点:\n        1.不能实时的和内存发生信息交换\n        2.不同线程对同一个变量的缓存值不同\n\n硬件层的内存屏障分为两种：读屏障,写屏障。【内存屏障是硬件层的】\n\n2.JAVA 通过volatile解决缓存读写不一致问题<内存屏障>\n    1.可见性，对于一个该变量的读，一定能看到读之前最后的写入。\n    2.原子性，对volatile变量的读写具有原子性，即单纯读和写的操作，都不会受到干扰。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"变量存储位置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量存储位置"}},[s._v("#")]),s._v(" 变量存储位置")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("一.方法区\n    1.static final修饰的成员变量，成员方法\n    2.静态变量\n    3.字节码文件，静态方法，\n\n二.栈<虚拟机栈>\n    1.八种基本数据类型\n    2.局部变量\n    3.局部的对象的引用\n\n三.堆\n    1.由new产生的所有对象\n    2.java数组也在堆中开辟内存空间\n    3.全局变量\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"堆结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#堆结构"}},[s._v("#")]),s._v(" 堆结构")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("新生代，养老区<重GC>，元空间\n元空间:\t物理内存\n新生代分:\n\t\t1.伊甸区\t\t\n\t\t2.幸存0区\n\t\t3.幸存1区\n新生代调优\n        xms:\t初始化大小\n        xmx:\t最大化大小\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"加载机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#加载机制"}},[s._v("#")]),s._v(" 加载机制")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("为什么需要这样的机制\n\t1.JVM根据classpath查找类，路径靠前优先级越高\n\t2.如何控制加载顺序，如子类和父类\n\t3.如何避免加载恶意的类，如，重新定义一个Object类\n类加载器完美解决了上面的问题\nBootstrap\t:\t系统类rt.jar\n扩展类加载器\t:\tjre/lib.ext\n应用类加载器  :\tclasspath\n用户自定义加载器\t:\tApp\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h4",{attrs:{id:"类加载器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[s._v("#")]),s._v(" 类加载器")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("BootstrapClassloader:\t\t基本启动类加载器，保证Java能够正常执行\nExtensionClassloader:\t\t\tjava更新类的加载器,如javax\nApplicationClassloader:\t\t应用加载器\n双亲委派机制\n沙箱安全机制\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"字节码加密"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字节码加密"}},[s._v("#")]),s._v(" 字节码加密")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("字节码混淆：ProGuard\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);